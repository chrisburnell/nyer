////
/// Mixins
/// @group utils
////


///
/// Generate transitions based on flexible input parameters.
/// Pass zero or more properties and zero to two further parameters.
/// Relies on defaults `all`, `$transition-time`, and `$transtion-function`.
///
/// @author Chris Burnell
///
/// @param {String} $values - Values
///
/// @example scss - No Values
///   @include transition();
///   // transition: all .2s ease;
///
/// @example scss - One Property
///   @include transition(color);
///   // transition: color .2s ease;
///
/// @example scss - Two Properties
///   @include transition(color, border);
///   // transition: color .2s ease, border .2s ease;
///
/// @example scss - One Property, One Duration
///   @include transition(color .5s);
///   // transition: color .5s ease;
///
/// @example scss - One Property, One Duration, One Timing Function
///   @include transition(color 1s linear);
///   // transition: color 1s linear;
///
/// @example scss - Two Properties, Two Durations, Two Timing Functions
///   @include transition(color 2s ease-in-out, border 1s linear);
///   // transition: color 2s ease-in-out, border 1s linear;
///
/// @require {variable} $transition-time
/// @require {variable} $transition-function
///
@mixin transition($values...) {
    $transition: ();
    @if( length($values) == 0 ) {
        $transition: all #{$transition-time} #{$transition-function};
    }
    @else if( str-index(""+$values+"", " ") == null and str-index(""+$values+"", ",") == null and $values != "none" ) {
        $transition: #{$values} #{$transition-time} #{$transition-function};
    }
    @else if( str-index(""+$values+"", ",") != null ) {
        @each $value in $values {
            @if( str-index(""+$value+"", " ") == null ) {
                $transition: append($transition, unquote("#{$value} #{$transition-time} #{$transition-function}"), comma);
            }
            @else if( str-index(""+$value+"", " ") == 1 ) {
                $transition: append($transition, unquote("#{$value} #{$transition-function}"), comma);
            }
            @else {
                $transition: append($transition, unquote("#{$value}"), comma);
            }
        }
    }
    @else {
        $transition: #{$values};
    }
    transition: #{$transition};
}


///
/// Describes CSS changes to the browser; to be coupled with any transitions.
///
/// @param {String} $values - Values
///
/// @example scss - One parameter
///   @include will-change(color);
///   // will-change: color;
///
/// @example scss - Multiple parameters
///   @include will-change(color, border);
///   // will-change: color, border;
///
/// @throw Error if no parameters are passed.
///
@mixin will-change($values...) {
    @if( length($values) == 0 ) {
        @error "will-change() expects one or more parameters.";
    }
    will-change: #{$values};
}


///
/// Centers an object horizontally and vertically.
///
@mixin center() {
    position: absolute;
    top:  50%;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
}
